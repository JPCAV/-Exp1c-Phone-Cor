geom_point() +
ylim(0.4, 1) + # Adjust y-lim to 0.4 when including error bars
ylab("Choice Proportion\n") +
xlab("\nRS Lags (s)") +
#geom_errorbar(aes(ymin = proportion - confidenceInterval, ymax = proportion + confidenceInterval)) +
theme_apa(remove.x.gridlines = FALSE, remove.y.gridlines = FALSE) +
theme(axis.title.y = element_text(size = 14, face = 'bold'), axis.text.y = element_text(size=14),
axis.title.x = element_text(size = 14, face = 'bold'), axis.text.x = element_text(size=14),
legend.text = element_text(size = 12), legend.key.size = unit(0.75, 'cm'),
legend.title = element_text(size = 14, face = 'bold'), legend.title.align = 0.5) +
scale_color_jcolors(palette = "pal8", labels = "HpHq-LpLq")
# Print plot
HpHq.Opt.Plot
# Produce Plot
HpHq.Opt.Plot <- ggplot(HpHqOptions, aes(x = RSLag, y = proportion, colour = Level)) +
labs(colour='Option\n Dominance') +
geom_line() +
geom_point() +
ylim(0.5, 1) + # Adjust y-lim to 0.4 when including error bars
ylab("Choice Proportion\n") +
xlab("\nRS Lags (s)") +
#geom_errorbar(aes(ymin = proportion - confidenceInterval, ymax = proportion + confidenceInterval)) +
theme_apa(remove.x.gridlines = FALSE, remove.y.gridlines = FALSE) +
theme(axis.title.y = element_text(size = 14, face = 'bold'), axis.text.y = element_text(size=14),
axis.title.x = element_text(size = 14, face = 'bold'), axis.text.x = element_text(size=14),
legend.text = element_text(size = 12), legend.key.size = unit(0.75, 'cm'),
legend.title = element_text(size = 14, face = 'bold'), legend.title.align = 0.5) +
scale_color_jcolors(palette = "pal8", labels = "HpHq-LpLq")
# Print plot
HpHq.Opt.Plot
load(file = "/Users/jpc/Documents/PhD/Experiments/Exp_2-Response-Signal_Task/RS_Data_Analysis/R-DataObjects/RS-cleaned-online-Dataset.RData")
load(file = "/Users/jpc/Documents/PhD/Experiments/Exp_2-Response-Signal_Task/RS_Data_Analysis/R-DataObjects/RS-cleaned-inlab-dataset.RData")
pkgs = c("reshape2", "tidyverse", "plotly", "jcolors", "ggforce", "jtools")
for (pkg in pkgs){
if (!require(pkg, character.only = T)){
install.packages(pkg)
library(pkg)
}
}
# Calculate proportion that each option type is chosen when paired with all other possible options
# Combine online and In-Lab datasets (Only when comparisons/test suggest datasets are equal)
all.RS.data <- rbind(online.dataset,inlab.dataset)
# Create trialType (1-6 possible option combinations) and targetOpt (comparison for dominance analysis) columns
## The code below sets ALL values in optionCombo column to 1. Could set to NA
all.RS.data[,"trialType"] <- NA
all.RS.data[,"targetOpt"] <- NA
# First, create a variable that combines all attributes together to get option type (trialType)
trialTypes <- paste0(all.RS.data$opt1price, all.RS.data$opt1quality, all.RS.data$opt2price, all.RS.data$opt2quality)
# Set trial types 1-6
all.RS.data$trialType[trialTypes == " Low Price High Quality High Price High Quality"| trialTypes == " High Price High Quality Low Price High Quality"] <- "1"
all.RS.data$trialType[trialTypes == " Low Price High Quality Low Price Low Quality" | trialTypes == " Low Price Low Quality Low Price High Quality"] <- "2"
all.RS.data$trialType[trialTypes == " Low Price High Quality High Price Low Quality" | trialTypes == " High Price Low Quality Low Price High Quality"] <- "3"
all.RS.data$trialType[trialTypes == " High Price High Quality High Price Low Quality" | trialTypes == " High Price Low Quality High Price High Quality"] <- "4"
all.RS.data$trialType[trialTypes == " High Price Low Quality Low Price Low Quality" | trialTypes == " Low Price Low Quality High Price Low Quality"] <- "5"
all.RS.data$trialType[trialTypes == " High Price High Quality Low Price Low Quality" | trialTypes == " Low Price Low Quality High Price High Quality"] <- "6"
# Set target (i.e. DOMINANT) option - target is compared with response variable
# Target = Low Price-High Quality
all.RS.data$targetOpt[all.RS.data$trialType == "1" & all.RS.data$opt1price ==" Low Price" &
all.RS.data$opt1quality == " High Quality"] <- "1"
all.RS.data$targetOpt[all.RS.data$trialType == "1" & all.RS.data$opt2price ==" Low Price" &
all.RS.data$opt2quality == " High Quality"] <- "2"
all.RS.data$targetOpt[all.RS.data$trialType == "2" & all.RS.data$opt1price ==" Low Price" &
all.RS.data$opt1quality == " High Quality"] <- "1"
all.RS.data$targetOpt[all.RS.data$trialType == "2" & all.RS.data$opt2price ==" Low Price" &
all.RS.data$opt2quality == " High Quality"] <- "2"
all.RS.data$targetOpt[all.RS.data$trialType == "3" & all.RS.data$opt1price ==" Low Price" &
all.RS.data$opt1quality == " High Quality"] <- "1"
all.RS.data$targetOpt[all.RS.data$trialType == "3" & all.RS.data$opt2price ==" Low Price" &
all.RS.data$opt2quality == " High Quality"] <- "2"
# Target = High Price-High Quality
all.RS.data$targetOpt[all.RS.data$trialType == "4" & all.RS.data$opt1price ==" High Price" &
all.RS.data$opt1quality == " High Quality"] <- "1"
all.RS.data$targetOpt[all.RS.data$trialType == "4" & all.RS.data$opt2price ==" High Price" &
all.RS.data$opt2quality == " High Quality"] <- "2"
# Target = Low Price-Low Quality
all.RS.data$targetOpt[all.RS.data$trialType == "5" & all.RS.data$opt1price ==" Low Price" &
all.RS.data$opt1quality == " Low Quality"] <- "1"
all.RS.data$targetOpt[all.RS.data$trialType == "5" & all.RS.data$opt2price ==" Low Price" &
all.RS.data$opt2quality == " Low Quality"] <- "2"
# No target - "true preference option"
all.RS.data$targetOpt[all.RS.data$trialType == "6" & all.RS.data$opt1price ==" High Price" &
all.RS.data$opt1quality == " High Quality"] <- "1"
all.RS.data$targetOpt[all.RS.data$trialType == "6" & all.RS.data$opt2price ==" High Price" &
all.RS.data$opt2quality == " High Quality"] <- "2"
# Create an array to store dominance proportions
# Need to know how many dimensions and the length of the dims within the array
RSlags <- sort(unique(all.RS.data$maxTrialTime))
# No. SRlags
nRSlags <- length(RSlags)
# How many possible option types/trial types (should be 6)
optType <- sort(unique(all.RS.data$trialType))
# No. trial types
n.optType <- length(optType)
# Subj ids for array
subjnams <- levels(all.RS.data$subj)
# No. subjects within array
nsubj <- length(subjnams)
# Create empty array with dims and dim names
dom.choice.opt <- array(dim = c(n.optType, nRSlags, 2, nsubj),
dimnames = list(optType, RSlags, c("chosen","shown"), subjnams), data = 0)
# Fill array with for loop
for(s in subjnams) {
cat("\n",s)
for(rs in 1:nRSlags) {
for(ot in 1:n.optType) {
# subset of data, pulling out all of subj s data for domLevel == ndomlevel[dl] (0, 1, 2)
s.all.RS.data <- subset(all.RS.data, subj == s & maxTrialTime == RSlags[rs] &
trialType == optType[ot])
# Count number of rows in the subset
n <- nrow(s.all.RS.data)
# then unlist each row
for(i in 1:n) {
tmp <- unlist(s.all.RS.data[i,])# produce a vector that contains all the atomic
# components which occur in s.on.data[i,] i.e. row i
if(tmp["trialError"] == "FALSE") {
# Check trial (tmp) is valid (i.e. trialError != " Slow" or " fast")
dom.choice.opt[ot,rs,"shown",s] <- dom.choice.opt[ot,rs,"shown",s] + 1
# Add 1 to shown array
if(tmp["response"] == tmp["targetOpt"]) {
# If subj chose targetOpt then increment the 'chosen' counter by 1
dom.choice.opt[ot,rs,"chosen",s] <- dom.choice.opt[ot,rs,"chosen",s] + 1
}
}
}
}
}
}
# Calculate proportion each trial type was chosen when shown
p.dom.choice.opt.arr <- dom.choice.opt[,,"chosen",] / dom.choice.opt[,,"shown",]
# Average each dominance level was chosen when shown
av.p.dom.choice.opt.df <- apply(p.dom.choice.opt.arr,1:2,mean) # check what is being calculated here
# Set dimension names for proportion dominant choice chosen x options array
dimnames(p.dom.choice.opt.arr) = list("Option"= c("LpHq-HpHq","LpHq-LpLq","LpHq-HpLq","HpHq-HpLq","LpLq-HpLq","HpHq-LpLq"),
"RSLag"= RSlags, "Participants" = subjnams)
# Set dimension names for AVERAGE proportion dominant choice chosen x options array
dimnames(av.p.dom.choice.opt.df) = list("Level"= c("LpHq-HpHq","LpHq-LpLq","LpHq-HpLq","HpHq-HpLq","LpLq-HpLq","HpHq-LpLq"),
"RSLag"= RSlags)
# standard error for choices x RSLag for the group
se.p.dom.choice.opt.df <- apply(p.dom.choice.opt.arr,1:2,function(x) sd(x)/sqrt(length(x)))
# Confidence interval for choices x RSLag for group
ci.p.dom.choice.opt.df <- se.p.dom.choice.opt.df * 1.96
# Reshape ci.p.choice.arr as data frame
ci.p.dom.choice.opt.df <- as.tbl_cube(ci.p.dom.choice.opt.df) %>%
as_tibble() %>%
as.data.frame()
# Rename confidence interval column
ci.p.dom.choice.opt.df <-  rename(ci.p.dom.choice.opt.df, "confidenceInterval" = "ci.p.dom.choice.opt.df" )
# Save confidence intervals into vector to be merged with dataframe
ci.p.dom.choice.opt <- ci.p.dom.choice.opt.df$confidenceInterval
# Reshape av.p.dom.choice.opt.df as data frame to add confidence interval column
av.p.dom.choice.opt.df <- as.tbl_cube(av.p.dom.choice.opt.df) %>%
as_tibble() %>%
as.data.frame()
# Add confidence intervals to dataframe for ggplot
av.p.dom.choice.opt.df <- add_column(.data = av.p.dom.choice.opt.df, ci.p.dom.choice.opt)
av.p.dom.choice.opt.df <- rename(av.p.dom.choice.opt.df, "proportion" = "av.p.dom.choice.opt.df")
av.p.dom.choice.opt.df <- rename(av.p.dom.choice.opt.df, "confidenceInterval" = "ci.p.dom.choice.opt")
av.p.dom.choice.opt.df$Level <- as.factor(av.p.dom.choice.opt.df$Level)
## Here, line colours are set with a palette from jcolors package
# True "preferential choice" - comparing HpHq - LpLq
# subset only HpHq - LpLq trials
HpHqOptions <- subset(av.p.dom.choice.opt.df, Level == "HpHq-LpLq")
# Produce Plot
HpHq.Opt.Plot <- ggplot(HpHqOptions, aes(x = RSLag, y = proportion, colour = Level)) +
labs(colour='Option\n Dominance') +
geom_line() +
geom_point() +
ylim(0.5, 1) + # Adjust y-lim to 0.4 when including error bars
ylab("Choice Proportion\n") +
xlab("\nRS Lags (s)") +
#geom_errorbar(aes(ymin = proportion - confidenceInterval, ymax = proportion + confidenceInterval)) +
theme_apa(remove.x.gridlines = FALSE, remove.y.gridlines = FALSE) +
theme(axis.title.y = element_text(size = 14, face = 'bold'), axis.text.y = element_text(size=14),
axis.title.x = element_text(size = 14, face = 'bold'), axis.text.x = element_text(size=14),
legend.text = element_text(size = 12), legend.key.size = unit(0.75, 'cm'),
legend.title = element_text(size = 14, face = 'bold'), legend.title.align = 0.5) +
scale_color_jcolors(palette = "pal8", labels = "HpHq-LpLq")
# Print plot
HpHq.Opt.Plot
# Produce Plot
HpHq.Opt.Plot <- ggplot(HpHqOptions, aes(x = RSLag, y = proportion, colour = Level)) +
labs(colour='Option\n Dominance') +
geom_line() +
geom_point() +
ylim(0.5, 1) + # Adjust y-lim to 0.4 when including error bars
ylab("Choice Proportion\n") +
xlab("\nRS Lags (s)") +
geom_errorbar(aes(ymin = proportion - confidenceInterval, ymax = proportion + confidenceInterval)) +
theme_apa(remove.x.gridlines = FALSE, remove.y.gridlines = FALSE) +
theme(axis.title.y = element_text(size = 14, face = 'bold'), axis.text.y = element_text(size=14),
axis.title.x = element_text(size = 14, face = 'bold'), axis.text.x = element_text(size=14),
legend.text = element_text(size = 12), legend.key.size = unit(0.75, 'cm'),
legend.title = element_text(size = 14, face = 'bold'), legend.title.align = 0.5) +
scale_color_jcolors(palette = "pal8", labels = "HpHq-LpLq")
# Print plot
HpHq.Opt.Plot
## Here, line colours are set with a palette from jcolors package
# Subset dom.choice.opt dataframe - looking at HpLq trials only
HpLqOption <- subset(av.p.dom.choice.opt.df, Level == "HpHq-HpLq" | Level == "LpLq-HpLq")
# Individual plot for dominance - Trial type 1 - LPHQ w. HPHQ, LpLq, LpHq
HpLq.Opt.Plot <- ggplot(HpLqOption, aes(x = RSLag, y = proportion, group = Level, colour = Level)) +
labs(colour='Option\n Dominance') +
geom_line() +
geom_point() +
ylim(0.5, 1) + # Adjust y-lim to 0.4 when including error bars
ylab("Choice Proportion\n") +
xlab("\nRS Lags (s)") +
geom_errorbar(aes(ymin = proportion - confidenceInterval, ymax = proportion + confidenceInterval)) +
theme_apa(remove.x.gridlines = FALSE, remove.y.gridlines = FALSE) +
theme(axis.title.y = element_text(size = 18, face = 'bold'), axis.text.y = element_text(size=18),
axis.title.x = element_text(size = 18, face = 'bold'), axis.text.x = element_text(size=18),
legend.text = element_text(size = 12), legend.key.size = unit(0.75, 'cm'),
legend.title = element_text(size = 14, face = 'bold'), legend.title.align = 0.5) +
scale_color_jcolors(palette = 'pal6', labels=c("HpHq - HpLq","LpLq - HpLq"))
# Print plot
HpLq.Opt.Plot
# Individual plot for dominance - Trial type 1 - LPHQ w. HPHQ, LpLq, LpHq
HpLq.Opt.Plot <- ggplot(HpLqOption, aes(x = RSLag, y = proportion, group = Level, colour = Level)) +
labs(colour='Option\n Dominance') +
geom_line() +
geom_point() +
ylim(0.4, 1) + # Adjust y-lim to 0.4 when including error bars
ylab("Choice Proportion\n") +
xlab("\nRS Lags (s)") +
geom_errorbar(aes(ymin = proportion - confidenceInterval, ymax = proportion + confidenceInterval)) +
theme_apa(remove.x.gridlines = FALSE, remove.y.gridlines = FALSE) +
theme(axis.title.y = element_text(size = 18, face = 'bold'), axis.text.y = element_text(size=18),
axis.title.x = element_text(size = 18, face = 'bold'), axis.text.x = element_text(size=18),
legend.text = element_text(size = 12), legend.key.size = unit(0.75, 'cm'),
legend.title = element_text(size = 14, face = 'bold'), legend.title.align = 0.5) +
scale_color_jcolors(palette = 'pal6', labels=c("HpHq - HpLq","LpLq - HpLq"))
# Print plot
HpLq.Opt.Plot
# Plot three trial types
LpHq.Opt.Plot <- ggplot(LpHqOptions, aes(x = RSLag, y = proportion, group = Level, colour = Level)) +
labs(colour='Option\n Dominance') +
geom_line() +
geom_point() +
ylim(0.4, 1) + # Adjust y-lim to 0.4 when including error bars
ylab("Choice Proportion\n") +
xlab("\nRS Lags (s)") +
geom_errorbar(aes(ymin = proportion - confidenceInterval, ymax = proportion + confidenceInterval)) +
theme_apa(remove.x.gridlines = FALSE, remove.y.gridlines = FALSE) +
theme(axis.title.y = element_text(size = 18, face = 'bold'), axis.text.y = element_text(size=18),
axis.title.x = element_text(size = 18, face = 'bold'), axis.text.x = element_text(size=18),
legend.text = element_text(size = 12), legend.key.size = unit(0.75, 'cm'),
legend.title = element_text(size = 14, face = 'bold'), legend.title.align = 0.5) +
scale_color_jcolors(palette = "default", labels=c("LpHq-HpHq","LpHq-LpLq","LpHq-HpLq")) #scale_color_manual(values = LpHq.Line.cols, breaks = c("1","2","3"), labels=c("LpHq-HpHq","LpHq-LpLq","LpHq-HpLq"))
# Subset dom.choice.opt dataframe - looking at LpHq trials only i.e. LpHq w/ HpHq, LpLq, LpHq
LpHqOptions <- subset(av.p.dom.choice.opt.df, Level == "LpHq-HpHq" | Level == "LpHq-LpLq" | Level == "LpHq-HpLq")
# Plot three trial types
LpHq.Opt.Plot <- ggplot(LpHqOptions, aes(x = RSLag, y = proportion, group = Level, colour = Level)) +
labs(colour='Option\n Dominance') +
geom_line() +
geom_point() +
ylim(0.4, 1) + # Adjust y-lim to 0.4 when including error bars
ylab("Choice Proportion\n") +
xlab("\nRS Lags (s)") +
geom_errorbar(aes(ymin = proportion - confidenceInterval, ymax = proportion + confidenceInterval)) +
theme_apa(remove.x.gridlines = FALSE, remove.y.gridlines = FALSE) +
theme(axis.title.y = element_text(size = 18, face = 'bold'), axis.text.y = element_text(size=18),
axis.title.x = element_text(size = 18, face = 'bold'), axis.text.x = element_text(size=18),
legend.text = element_text(size = 12), legend.key.size = unit(0.75, 'cm'),
legend.title = element_text(size = 14, face = 'bold'), legend.title.align = 0.5) +
scale_color_jcolors(palette = "default", labels=c("LpHq-HpHq","LpHq-LpLq","LpHq-HpLq")) #scale_color_manual(values = LpHq.Line.cols, breaks = c("1","2","3"), labels=c("LpHq-HpHq","LpHq-LpLq","LpHq-HpLq"))
# Print plot
LpHq.Opt.Plot
load("/Users/jpc/Documents/PhD/Experiments/Exp-3-Titrated-Response Time Task/TRT_Data_Analysis/JATOS-Output_Data_txt_files/TRT-inlab-dataset.RData")
TRT.inlab.dataset
uniq(TRT.inlab.dataset$subj)
unique(TRT.inlab.dataset$subj)
getwd()
setwd("Users/jpc/Documents/Experiments")
ls()
ls
setwd("Users/jpc/Documents/PhD")
setwd("/Users/jpc/Documents/PhD/Experiments/Exp_1c-Phone Cor/")
read.delim("phone-attributes.xlsx")
readxl::read_xls("phone-attributes.xlsx")
library("readxl", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
patts <- read_xls("phone-attributes.xlsx")
ls(\)
ls()
getwd()
read_excel("phone-attributes.xlsx")
install.packages("readxl")
install.packages("readxl")
getwd()
setwd("/Users/jpc/Documents/PhD/Experiments/Exp_1c-Phone Cor/Data Analysis")
setwd("/Users/jpc/Documents/PhD/Experiments/Exp_1c-Phone Cor/Data Analysis")
phoneAtts <- read_excel("phone-attributes.xlsx")
# Load and install required packages
pkgs = c("tidyverse", "readxl", "ggforce")
for (pkg in pkgs){
if (!require(pkg, character.only = T)){
install.packages(pkg)
library(pkg)
}
}
# locate file directory
setwd("/Users/jpc/Documents/PhD/Experiments/Exp_1c-Phone Cor/Data Analysis")
# Read in excel sheet with phone attributes
phoneAtts <- read_excel("phone-attributes.xlsx")
phoneAtts
select(phoneAtts, 'price ($)')
# Remove columns
test <- select(phoneAtts, 3:8)
test
# Remove columns
test <- select(phoneAtts, "`price ($)`","`camera (MP)`", "`memory (GB)`", "`Device screen size (inches)`", "`pixels height`", "`pixels width`")
c("`price ($)`", "`camera (MP)`", "`memory (GB)`", "`Device screen size (inches)`", "`pixels height`", "`pixels width`")
# Remove columns
test <- select(phoneAtts,
c("`price ($)`", "`camera (MP)`", "`memory (GB)`", "`Device screen size (inches)`", "`pixels height`", "`pixels width`"))
# Remove columns
test <- select(phoneAtts,
c(`price ($)`, `camera (MP)`, `memory (GB)`, `Device screen size (inches)`, `pixels height`, `pixels width`))
test
test
# Read in excel sheet with phone attributes
phoneAtts <- read_excel("phone-attributes.xlsx")
phoneAtts
# Remove brand and model columns
phoneAtts <- select(phoneAtts,
c(`price ($)`, `camera (MP)`, `memory (GB)`,
`Device screen size (inches)`, `pixels height`,
`pixels width`)) %>%
rename("price" = `price ($)`)
phoneAtts
# Read in excel sheet with phone attributes
phoneAtts <- read_excel("phone-attributes.xlsx")
# Remove brand and model columns
# Remove brand and model columns
phoneAtts <- select(phoneAtts,
# Read in excel sheet with phone attributes
phoneAtts <- read_excel("phone-attributes.xlsx")
# Remove brand and model columns
phoneAtts <- select(phoneAtts,
c(`price ($)`, `camera (MP)`, `memory (GB)`,
`Device screen size (inches)`, `pixels height`,
`pixels width`)) %>%
rename(c("price" = `price ($)`, "camera" = `camera (MP)`, "memory" = `memory (GB)`,
"screen size" = `Device screen size (inches)`))
# Read in excel sheet with phone attributes
phoneAtts <- read_excel("phone-attributes.xlsx")
# Remove brand and model columns
phoneAtts <- select(phoneAtts,
c(`price ($)`, `camera (MP)`, `memory (GB)`,
`Device screen size (inches)`, `pixels height`,
`pixels width`)) %>%
rename(c("price" = `price ($)`, "camera" = `camera (MP)`, "memory" = `memory (GB)`,
"screen size" = `Device screen size (inches)`))
phoneAtts
# Remove brand and model columns
phoneAtts <- select(phoneAtts,
c(`price ($)`, `camera (MP)`, `memory (GB)`,
`Device screen size (inches)`, `pixels height`,
`pixels width`)) %>%
rename(c("price" = `price ($)`, "camera" = `camera (MP)`, "memory" = `memory (GB)`,
"screen_size" = `Device screen size (inches)`))
# Read in excel sheet with phone attributes
phoneAtts <- read_excel("phone-attributes.xlsx")
# Remove brand and model columns
phoneAtts <- select(phoneAtts,
c(`price ($)`, `camera (MP)`, `memory (GB)`,
`Device screen size (inches)`, `pixels height`,
`pixels width`)) %>%
rename(c("price" = `price ($)`, "camera" = `camera (MP)`, "memory" = `memory (GB)`,
"screen_size" = `Device screen size (inches)`))
phoneAtts
# Remove brand and model columns
phoneAtts <- select(phoneAtts,
c(`price ($)`, `camera (MP)`, `memory (GB)`,
`Device screen size (inches)`, `pixels height`,
`pixels width`)) %>%
rename(c("price" = `price ($)`, "camera" = `camera (MP)`, "memory" = `memory (GB)`,
"screen_size" = `Device screen size (inches)`)) %>%
bind_cols(c("pixels height", "pixels width"))
# Read in excel sheet with phone attributes
phoneAtts <- read_excel("phone-attributes.xlsx")
# Remove brand and model columns
phoneAtts <- select(phoneAtts,
c(`price ($)`, `camera (MP)`, `memory (GB)`,
`Device screen size (inches)`, `pixels height`,
`pixels width`)) %>%
rename(c("price" = `price ($)`, "camera" = `camera (MP)`, "memory" = `memory (GB)`,
"screen_size" = `Device screen size (inches)`)) %>%
bind_cols(c("pixels height", "pixels width"))
# Read in excel sheet with phone attributes
phoneAtts <- read_excel("phone-attributes.xlsx")
# Remove brand and model columns
phoneAtts <- select(phoneAtts,
c(`price ($)`, `camera (MP)`, `memory (GB)`,
`Device screen size (inches)`, `pixels height`,
`pixels width`)) %>%
rename(c("price" = `price ($)`, "camera" = `camera (MP)`, "memory" = `memory (GB)`,
"screen_size" = `Device screen size (inches)`)) %>%
mutate("resolution" = c(`pixels height`, `pixels width`))
# Read in excel sheet with phone attributes
phoneAtts <- read_excel("phone-attributes.xlsx")
# Remove brand and model columns
phoneAtts <- select(phoneAtts,
c(`price ($)`, `camera (MP)`, `memory (GB)`,
`Device screen size (inches)`, `pixels height`,
`pixels width`)) %>%
rename(c("price" = `price ($)`, "camera" = `camera (MP)`, "memory" = `memory (GB)`,
"screen_size" = `Device screen size (inches)`)) %>%
mutate("resolution" = `pixels height` + `pixels width`)
phoneAtts
# Read in excel sheet with phone attributes
phoneAtts <- read_excel("phone-attributes.xlsx")
# Remove brand and model columns
phoneAtts <- select(phoneAtts,
c(`price ($)`, `camera (MP)`, `memory (GB)`,
`Device screen size (inches)`, `pixels height`,
`pixels width`)) %>%
rename(c("price" = `price ($)`, "camera" = `camera (MP)`, "memory" = `memory (GB)`,
"screen_size" = `Device screen size (inches)`)) %>%
mutate("resolution" = as.character(`pixels height`) + as.character(`pixels width`))
?unite_
?unite
phoneAtts
# Read in excel sheet with phone attributes
phoneAtts <- read_excel("phone-attributes.xlsx")
# Remove brand and model columns
phoneAtts <- select(phoneAtts,
c(`price ($)`, `camera (MP)`, `memory (GB)`,
`Device screen size (inches)`, `pixels height`,
`pixels width`)) %>%
rename(c("price" = `price ($)`, "camera" = `camera (MP)`, "memory" = `memory (GB)`,
"screen_size" = `Device screen size (inches)`)) %>%
unite(c(`pixels height`, `pixels width`), sep = " x ")
# Read in excel sheet with phone attributes
phoneAtts <- read_excel("phone-attributes.xlsx")
# Remove brand and model columns
phoneAtts <- select(phoneAtts,
c(`price ($)`, `camera (MP)`, `memory (GB)`,
`Device screen size (inches)`, `pixels height`,
`pixels width`)) %>%
rename(c("price" = `price ($)`, "camera" = `camera (MP)`, "memory" = `memory (GB)`,
"screen_size" = `Device screen size (inches)`)) %>%
unite("resolution", c(`pixels height`, `pixels width`), sep = " x ")
phoneAtts
# Export as text file
write_csv(phoneAtts, "/Users/jpc/Documents/PhD/Experiments/Exp_1c-Phone Cor/Data Analysis")
write_csv(x = phoneAtts, path = "/Users/jpc/Documents/PhD/Experiments/Exp_1c-Phone Cor/Data Analysis")
write_csv(x = phoneAtts, path = "eaf")
write_excel_csv(x = phoneAtts, path = "eaf")
# Two common commands at the start of an R script are:
rm(list=ls()) # Clear R's memory
# ********** Start of header **************
# Title: Phone - Correlated/Uncorrelated attributes
#
# Author: J-P Cavallaro  (jon-paul.cavallaro@uon.edu.au)
# Date: 03-03-2020
#
# *********** End of header ****************
# Two common commands at the start of an R script are:
rm(list=ls()) # Clear R's memory
# Load and install required packages
pkgs = c("tidyverse", "readxl", "ggforce")
for (pkg in pkgs){
if (!require(pkg, character.only = T)){
install.packages(pkg)
library(pkg)
}
}
# locate file directory
setwd("/Users/jpc/Documents/PhD/Experiments/Exp_1c-Phone Cor/Data Analysis")
# Read in excel sheet with phone attributes
phoneAtts <- read_excel("phone-attributes.xlsx")
# Remove brand and model columns
phoneAtts <- select(phoneAtts,
c(`price ($)`, `camera (MP)`, `memory (GB)`,
`Device screen size (inches)`, `pixels height`,
`pixels width`)) %>% # Change column names
rename(c("price" = `price ($)`, "camera" = `camera (MP)`, "memory" = `memory (GB)`,
"screen_size" = `Device screen size (inches)`)) %>% # Create resolution column
unite("resolution", c(`pixels height`, `pixels width`), sep = " x ")
# Export as csv
write_excel_csv(x = phoneAtts, path = "phoneAtts")
# ********** Start of header **************
# Title: Phone - Correlated/Uncorrelated attributes
#
# Author: J-P Cavallaro  (jon-paul.cavallaro@uon.edu.au)
# Date: 03-03-2020
#
# *********** End of header ****************
# Two common commands at the start of an R script are:
rm(list=ls()) # Clear R's memory
# Load and install required packages
pkgs = c("tidyverse", "readxl", "ggforce")
for (pkg in pkgs){
if (!require(pkg, character.only = T)){
install.packages(pkg)
library(pkg)
}
}
# locate file directory
setwd("/Users/jpc/Documents/PhD/Experiments/Exp_1c-Phone Cor/Data Analysis")
# Read in excel sheet with phone attributes
phoneAtts <- read_excel("phone-attributes.xlsx")
# Remove brand and model columns
phoneAtts <- select(phoneAtts,
c(`price ($)`, `camera (MP)`, `memory (GB)`,
`Device screen size (inches)`, `pixels height`,
`pixels width`)) %>% # Change column names
rename(c("price" = `price ($)`, "camera" = `camera (MP)`, "memory" = `memory (GB)`,
"screen_size" = `Device screen size (inches)`)) %>% # Create resolution column
unite("resolution", c(`pixels height`, `pixels width`), sep = " x ")
# Export as csv
write_excel_csv(x = phoneAtts, path = "phoneAtts.csv")
